
model = xgb.XGBRegressor(colsample_bytree=0.5,
                 gamma=0,                 
                 learning_rate=0.001,
                 max_depth=3,
                 min_child_weight=1.5,
                 n_estimators=10000,                                                                    
                 reg_alpha=0.75,
                 reg_lambda=0.45,
                 subsample=0.8,
                 seed=42) 

model = model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# create dataframe
fb_df = df.copy()*-1

fb_df = fb_df.rename(columns={"ISTGemeinkosten" : "y"})
fb_df_cum = fb_df.groupby(fb_df.index.year).cumsum()

fb_df['ds'] = fb_df.index
fb_df_cum['ds'] = fb_df.index
fb_df_cum

regr_st= 2
regr_end = 4
regressoren = []

prophet = Prophet(growth='linear')
for i in range(regr_st,regr_end+1,1):
    prophet.add_regressor(fb_df.columns[i])
    regressoren.append(fb_df.columns[i])
    print('Regressor ', fb_df.columns[i], ' added')

start = '2017-01-01'
te_start = '2019-05-01'
te_end = '2019-12-01'
cols = ['y', 'ds'] + regressoren

fb_df_train = fb_df_cum[(fb_df_cum.index >= start) & (fb_df_cum.index < te_start)]
fb_df_train = fb_df_train[cols]
fb_df_train.reset_index(inplace=True)
del fb_df_train['Period']
fb_df_train

prophet.fit(fb_df_train)

# create future dataframe
future = prophet.make_future_dataframe(periods=8, freq='MS', include_history = True)

#for i in range(regr_st,regr_end+1,1):
#    future[fb_df.columns[i]] = fb_df[fb_df.columns[i]][start:te_end].values
future = future.merge(fb_df_cum[cols], on='ds')
del future['y']
future

forecast = prophet.predict(future)
y_pred = forecast['yhat'][forecast['ds'] >= te_start]
y_true = fb_df_cum['y'][te_start:te_end]

from fbprophet.plot import add_changepoints_to_plot
fig = prophet.plot(forecast)
a = add_changepoints_to_plot(fig.gca(), prophet, forecast)
